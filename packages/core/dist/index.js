(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.index = {}));
})(this, (function (exports) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */

    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    exports.ResponseType = void 0;
    (function (ResponseType) {
        ResponseType["JSON"] = "JSON";
        ResponseType["TEXT"] = "TEXT";
        ResponseType["BLOB"] = "BLOB";
        ResponseType["ARRAYBUFFER"] = "ARRAYBUFFER";
    })(exports.ResponseType || (exports.ResponseType = {}));

    /*
     * @Author: IT-hollow
     * @Date: 2024-05-10 21:10:40
     * @LastEditors: hollow
     * @LastEditTime: 2024-09-12 15:12:27
     * @Description: Â∏∏ÈáèÊñá‰ª∂
     *
     * Copyright (c) 2024 by efun, All Rights Reserved.
     */
    /**Âü∫Êú¨ËØ∑Ê±ÇÈÖçÁΩÆ */
    const BASE_REQUEST_OPTIONS = {
        method: 'GET',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        cache: 'no-cache',
        credentials: 'include',
        responseType: exports.ResponseType.JSON,
        timeout: 60000,
    };
    /**timestampÊï∞ */
    const TIMESTAMP_NUMBER = {
        /**Áßí */
        second: 1000,
        /**ÂàÜ */
        min: 60 * 1000,
        /**Â∞èÊó∂ */
        hour: 60 * 60 * 1000,
        /**Â§© */
        day: 24 * 60 * 60 * 1000,
        /**Âë® */
        week: 7 * 24 * 60 * 60 * 1000,
        /**Êúà(30Â§©) */
        month: 30 * 24 * 60 * 60 * 1000,
    };

    /** cookieÊúâÊïàÊúü-8Â∞èÊó∂ */
    const DEFAULT_COOKIE_EXPIRE_TIME = 1000 * 60 * 60 * 8;
    /**
     * Ê†πÊçÆ‰º†ÂÖ•ÁöÑkeyÂà†Èô§ÂØπÂ∫îÁöÑcookie
     * @param key
     */
    function delCookie(key) {
        setCookie(key, '', -1);
    }
    /**
     * Ê∏ÖÈô§ÂÖ®ÈÉ®cookie
     */
    function clearCookie() {
        const keys = document.cookie.match(/[^ =;]+(?==)/g);
        if (keys) {
            for (let i = 0; i < keys.length; i++) {
                if (keys[i].indexOf('_') === 0)
                    continue;
                delCookie(keys[i]);
            }
        }
    }
    /**
     * Ê†πÊçÆ‰º†ÂÖ•ÁöÑkeyËé∑Âèñcookie
     * @param key
     * @returns
     */
    function getCookie(key) {
        const arrStr = document.cookie.split('; ');
        for (let i = arrStr.length - 1; i >= 0; i--) {
            const temp = arrStr[i].split('=');
            if (temp[0].trim() === key) {
                try {
                    return decodeURIComponent(temp[1]);
                }
                catch (e) {
                    return unescape(temp[1]);
                }
            }
        }
        return '';
    }
    /**
     * Ê∑ªÂä†cookie
     * @param objName
     * @param objValue
     * @param objHours ËøáÊúüÊó∂Èó¥ÔºåÂçï‰Ωçh
     */
    function setCookie(key, val, timestamp, domain) {
        const expireTime = isInvalidVal(timestamp)
            ? DEFAULT_COOKIE_EXPIRE_TIME
            : timestamp;
        let str = key + '=' + encodeURIComponent(val);
        if (expireTime && expireTime > 0) {
            // ‰∏∫Êó∂‰∏çËÆæÂÆöËøáÊúüÊó∂Èó¥ÔºåÊµèËßàÂô®ÂÖ≥Èó≠Êó∂cookieËá™Âä®Ê∂àÂ§±ÔºåÈªòËÆ§‰∏∫30Â§©
            const date = new Date();
            const ms = expireTime;
            date.setTime(date.getTime() + ms);
            str += '; expires=' + date.toUTCString();
        }
        if (domain) {
            str += '; domain=' + domain;
        }
        str += '; path=/';
        document.cookie = str;
    }

    /**
     * Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥Êà≥
     */
    function getCurrentTimeStamp() {
        return new Date().getTime();
    }
    /**
     * Ëé∑ÂèñÊ†ºÂºèÊó∂Èó¥
     * @param format
     * @param timestamp
     */
    function getFormatDate(timestamp, format) {
        const date = timestamp ? new Date(timestamp) : new Date();
        const years = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        const formatNum = (num) => {
            return String(num).padStart(2, '0');
        };
        let dateStr = `${years}-${formatNum(month)}-${formatNum(day)}`;
        if (format === 'YYYY-MM-DD hh:mm:ss') {
            const hour = date.getHours();
            const min = date.getMinutes();
            const second = date.getSeconds();
            dateStr += ` ${formatNum(hour)}:${formatNum(min)}:${formatNum(second)}`;
        }
        return dateStr;
    }

    /**
     * Ê†πÊçÆkeyËé∑ÂèñlocalStorage
     * @param key
     * @returns
     */
    function getLocalStorage(key) {
        const val = localStorage.getItem(key) || '';
        return val ? JSON.parse(val) : val;
    }
    /**
     * ËÆæÁΩÆlocalStorage
     * @param key
     * @param json
     */
    function setLocalStorage(key, json) {
        localStorage.setItem(key, JSON.stringify(json));
    }
    /**
     * Ê†πÊçÆkeyÊ∏ÖÈô§ÂØπÂ∫îÁöÑlocalStorage
     * @param key
     */
    function removeLocalStorage(key) {
        localStorage.removeItem(key);
    }
    /**
     * Ê∏ÖÈô§ÂÖ®ÈÉ®localStorage
     */
    function clearLocalStorage() {
        localStorage.clear();
    }
    /**
     * ËÆæÁΩÆlocalStorageÔºàËá™Â∏¶ÂëΩÂêçÁ©∫Èó¥+Ëá™Âä®ËøáÊúüÊó∂Èó¥Ôºâ
     * @param key
     * @param value
     * @param expireTime ËøáÊúüÊó∂Èó¥ÔºåÂçï‰Ωçms
     */
    function setLocalItemWithExpire(key, value, expireTime) {
        const currentTime = new Date().getTime();
        const expire = currentTime + expireTime;
        const data = {
            value,
            expire,
            date: getFormatDate(expire),
        };
        setLocalStorage(key, data);
    }
    /**
     * Ëé∑ÂèñlocalStorageÔºàËá™Â∏¶ÂëΩÂêçÁ©∫Èó¥+Ëá™Âä®ËøáÊúüÊó∂Èó¥Ôºâ
     * @param key
     */
    function getLocalItemWithExpire(key) {
        const data = getLocalStorage(key);
        if (!data) {
            return '';
        }
        if (isWidthExpireVal(key)) {
            const currentTime = getCurrentTimeStamp();
            if (currentTime > data.expire) {
                removeLocalStorage(key);
                return '';
            }
            return data.value;
        }
        else {
            return data;
        }
    }
    /**
     * Ê∏ÖÈô§Â∑≤Âà∞ËøáÊúüÊó∂Èó¥ÁöÑlocalStorage
     */
    function clearExpiredLocalStorage() {
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i) || '';
            console.log('üöÄ ~ key:', key);
            if (isWidthExpireVal(key)) {
                const currentTime = getCurrentTimeStamp();
                const { expire } = getLocalStorage(key);
                if (expire && currentTime > expire) {
                    removeLocalStorage(key);
                }
            }
        }
    }
    /**ÊòØÂê¶ÊúâË∂ÖÊó∂ËÆæÁΩÆÁöÑval */
    function isWidthExpireVal(key) {
        const data = getLocalStorage(key);
        if (!data) {
            return false;
        }
        if (data instanceof Object && !isInvalidVal(data.expire)) {
            return true;
        }
        return false;
    }

    /**
     * Â∞ÜÂØπË±°ËΩ¨ÊàêÂèÇÊï∞
     * @param obj ÂØπË±°
     * @param isEncode ÊòØÂê¶encode
     * @returns a=1&b=2...
     */
    function qsString(obj, isEncode = true) {
        if (obj instanceof Object) {
            let str = '';
            Object.keys(obj).forEach((key, index) => {
                str += `${index ? '&' : ''}${key}=${isEncode ? encodeURIComponent(obj[key]) : obj[key]}`;
            });
            return str;
        }
        else if (typeof obj === 'string') {
            return obj;
        }
        else if (typeof obj === 'number') {
            return `${obj}`;
        }
        else {
            return '';
        }
    }
    /**
     * Ê†°È™åÊòØÂê¶‰∏∫Á∫ØÁ≤πÁöÑÂØπË±°
     * @param obj
     */
    function isPlainObject(obj) {
        let proto, Ctor;
        if (!obj || typeof obj !== 'object')
            return false;
        proto = Object.getPrototypeOf(obj);
        if (!proto)
            return true;
        Ctor = proto.hasOwnProperty('constructor') && proto.constructor;
        return typeof Ctor === 'function' && Ctor === Object;
    }
    /**
     * Ê†ºÂºèÂåñpostËØ∑Ê±ÇÁöÑbody
     * @param body
     * @param contentType
     */
    function formatPostBody(body, contentType) {
        if (!body) {
            return '';
        }
        if (!contentType || contentType.includes('urlencoded'))
            return qsString(body);
        if (contentType.includes('json'))
            return typeof body === 'string' ? body : JSON.stringify(body);
    }
    function deepCloneObj(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    /**ÊòØÂê¶‰∏∫Êó†ÊïàÂÄº */
    function isInvalidVal(val) {
        return [NaN, undefined, null, 'null', 'undefined', 'NaN'].indexOf(val) >= 0;
    }

    /*
     * @Author: IT-hollow
     * @Date: 2024-05-14 21:42:51
     * @LastEditors: hollow
     * @LastEditTime: 2024-09-21 15:27:51
     * @Description: xhr ajaxËØ∑Ê±ÇÂ∞ÅË£Ö
     *
     * Copyright (c) 2024 by efun, All Rights Reserved.
     */
    const defaultOptions = BASE_REQUEST_OPTIONS;
    function ajax(url, options) {
        const { method, params, body, headers } = Object.assign({}, defaultOptions, options);
        const xhr = new XMLHttpRequest();
        const paramStr = qsString(params);
        //ÂêØÂä®Âπ∂ÂèëÈÄÅ‰∏Ä‰∏™ËØ∑Ê±Ç
        if ((method === null || method === void 0 ? void 0 : method.toLocaleLowerCase()) === 'get') {
            xhr.open('GET', `${url}${url.includes('?') ? '' : '?'}${paramStr}`, true);
            xhr.send(null);
        }
        else {
            xhr.open('post', url, true);
            for (const key in headers) {
                if (Object.prototype.hasOwnProperty.call(headers, key)) {
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
            xhr.send(formatPostBody(body, headers['Content-Type']));
        }
        return new Promise((resolve, reject) => {
            const result = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: {},
            };
            xhr.ontimeout = function () {
                result.status = xhr.status;
                reject(result);
            };
            xhr.onreadystatechange = function () {
                if (xhr.readyState !== 4) {
                    return;
                }
                const status = xhr.status;
                const statusText = xhr.statusText;
                result.status = status;
                result.statusText = statusText;
                if (status >= 200 && status < 400) {
                    resolve(Object.assign({
                        data: JSON.parse(xhr.response)
                    }, result));
                }
                else {
                    reject(result);
                }
            };
        });
    }

    const inital = BASE_REQUEST_OPTIONS;
    function fetchRequest(url, config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof url !== 'string')
                throw new TypeError('url must be required and of string type');
            const options = deepCloneObj(inital);
            Object.assign(options, config || {});
            const { method, params, body, headers, cache, credentials, responseType } = options;
            if (params != null) {
                const paramsStr = qsString(params);
                url += `${url.includes('?') ? '' : '?'}${paramsStr}`;
            }
            const bodyInit = {
                method: method === null || method === void 0 ? void 0 : method.toUpperCase(),
                headers,
                credentials,
                cache,
            };
            if (/^(POST|PUT|PATCH)$/i.test(method) && body != null) {
                if (isPlainObject(body)) {
                    bodyInit['body'] = formatPostBody(body, headers['Content-Type']);
                }
            }
            try {
                const req = yield fetch(url, bodyInit);
                const { status, statusText } = req;
                const result = {
                    status,
                    statusText,
                    headers: {},
                };
                let data = null;
                if (status >= 200 && status < 400) {
                    switch (responseType.toUpperCase()) {
                        case exports.ResponseType.JSON:
                            data = yield req.json();
                            break;
                        case exports.ResponseType.TEXT:
                            data = yield req.text();
                            break;
                        case exports.ResponseType.BLOB:
                            data = yield req.blob();
                            break;
                        case exports.ResponseType.ARRAYBUFFER:
                            data = yield req.arrayBuffer();
                            break;
                    }
                }
                return Object.assign({
                    data,
                }, result);
            }
            catch (error) {
                console.log('fetchËØ∑Ê±ÇÈîôËØØ:', error);
                return error;
            }
        });
    }

    /*
     * @Author: IT-hollow
     * @Date: 2024-05-10 23:06:28
     * @LastEditors: hollow
     * @LastEditTime: 2024-09-21 15:30:22
     * @Description: jsonpÂ∞ÅË£Ö
     *
     * Copyright (c) 2024 by efun, All Rights Reserved.
     */
    const defaultConfig = {
        timeout: 60000,
        params: {},
    };
    const count = 0;
    function jsonp(url, opts) {
        if (!window) {
            return Promise.reject('it is not browser env!');
        }
        // ÂÆûÁé∞PromiseÂåñ
        return new Promise((resolve, reject) => {
            //ËÆæÁΩÆÈªòËÆ§ÂèÇÊï∞
            const { timeout, params } = Object.assign({}, defaultConfig, opts);
            const name = 'jsonpcallback' + new Date().getTime() + count;
            let timer = null;
            //Ê∏ÖÈô§scriptÊ†áÁ≠æ‰ª•ÂèäÊ≥®ÂÜåÁöÑÂÖ®Â±ÄÂáΩÊï∞‰ª•ÂèäË∂ÖÊó∂ÂÆöÊó∂Âô®
            function cleanup() {
                // Ê∏ÖÈô§ÂáΩÊï∞
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                    window[name] = null;
                    if (timer) {
                        clearTimeout(timer);
                    }
                }
            }
            if (!isInvalidVal(timeout)) {
                // Ë∂ÖÊó∂
                timer = setTimeout(() => {
                    cleanup();
                    reject('timeout');
                }, timeout);
            }
            // Ê≥®ÂÜåÂÖ®Â±ÄÂáΩÊï∞ÔºåÁ≠âÂæÖÊâßË°å‰∏≠...
            window[name] = (res) => {
                // Âè™Ë¶ÅËøô‰∏™ÂáΩÊï∞‰∏ÄÊâßË°åÔºåÂ∞±Ë°®Á§∫ËØ∑Ê±ÇÊàêÂäüÔºåÂèØ‰ª•‰ΩøÁî®Ê∏ÖÈô§ÂáΩÊï∞‰∫Ü
                if (window[name]) {
                    cleanup();
                }
                // Â∞ÜËØ∑Ê±ÇÂà∞ÁöÑÊï∞ÊçÆÊâîÁªôthen
                resolve(res);
            };
            // ‰ª•‰∏ãÂ∞ÜparamsÂØπË±°Ê†ºÂºèÁöÑÂèÇÊï∞ÊãºÊé•Âà∞urlÁöÑÂêéÈù¢
            let str = '';
            if (isPlainObject(params)) {
                for (const key in params) {
                    const value = params[key] || '';
                    str += `&${key}=${encodeURIComponent(value)}`;
                }
            }
            url = url + (url.indexOf('?') > 0 ? '' : '?') + str.substr(1);
            // ÊúÄÂêéÂä†‰∏ä‰∏éÊúçÂä°Á´ØÂçèÂïÜÁöÑjsonpËØ∑Ê±ÇÂ≠óÊÆµ
            url = `${url}&callback=${name}`;
            const script = document.createElement('script');
            script.src = url;
            // ‰ª•‰∏ãËøôÊù°ÊâßË°å‰∏îÊàêÂäüÂêéÔºåÂÖ®Â±ÄÁ≠âÂæÖÂáΩÊï∞Â∞±‰ºöË¢´ÊâßË°å
            document.head.appendChild(script);
        });
    }

    class Http {
        constructor() {
            /** ÊòØÂê¶ÊîØÊåÅfetch */
            this.supportFetch = true;
            this.jsonp = jsonp;
            this.supportFetch = !!window.fetch;
        }
        get(url, params) {
            return __awaiter(this, void 0, void 0, function* () {
                const method = 'GET';
                if (this.supportFetch) {
                    const { data } = yield fetchRequest(url, {
                        method,
                        params,
                    });
                    return data;
                }
                else {
                    const { data } = yield ajax(url, {
                        method,
                        params,
                    });
                    return data;
                }
            });
        }
        post(url, body, opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const method = 'POST';
                const headers = {
                    'Content-Type': 'application/json;charset=utf-8',
                };
                const options = {
                    method,
                    headers,
                    body,
                };
                if (opts) {
                    Object.assign(options, opts);
                }
                if (this.supportFetch) {
                    const { data } = yield fetchRequest(url, options);
                    return data;
                }
                else {
                    const { data } = yield ajax(url, options);
                    return data;
                }
            });
        }
    }
    const http = new Http();

    exports.BASE_REQUEST_OPTIONS = BASE_REQUEST_OPTIONS;
    exports.Http = Http;
    exports.TIMESTAMP_NUMBER = TIMESTAMP_NUMBER;
    exports.clearCookie = clearCookie;
    exports.clearExpiredLocalStorage = clearExpiredLocalStorage;
    exports.clearLocalStorage = clearLocalStorage;
    exports.deepCloneObj = deepCloneObj;
    exports.delCookie = delCookie;
    exports.formatPostBody = formatPostBody;
    exports.getCookie = getCookie;
    exports.getCurrentTimeStamp = getCurrentTimeStamp;
    exports.getFormatDate = getFormatDate;
    exports.getLocalItemWithExpire = getLocalItemWithExpire;
    exports.getLocalStorage = getLocalStorage;
    exports.http = http;
    exports.isInvalidVal = isInvalidVal;
    exports.isPlainObject = isPlainObject;
    exports.isWidthExpireVal = isWidthExpireVal;
    exports.qsString = qsString;
    exports.removeLocalStorage = removeLocalStorage;
    exports.setCookie = setCookie;
    exports.setLocalItemWithExpire = setLocalItemWithExpire;
    exports.setLocalStorage = setLocalStorage;

}));
//# sourceMappingURL=index.js.map
